#!/bin/bash
###########################################################
# Development Environment Setup
#
# Copyright (c) Marcos Gomes-Borges
###########################################################
VERSION="0.0.2"
DEVSETUP_URL="https://raw.githubusercontent.com/marcosgomesborges/dev-setup/master/macos/devsetup"
DEVSETUP_PREFIX=$(dirname $0)

COLOR_RED="\033[91m"
COLOR_GREEN="\033[92m"
COLOR_YELLOW="\033[93m"
COLOR_BLUE="\033[94m"
COLOR_MAGENTA="\033[95m"
COLOR_DEFAULT="\033[39m"

# devsetup usage
###########################################################
usage() {
cat <<EOF
    Usage: devsetup [OPTIONS]

    Option          Long option         Meaning
    -h              --help              Show this help text and exit
    -v              --version           Show the version number of devsetup script
    -i              --install           Install a package
    -u              --update            Update a package
EOF
}

# devsetup install usage
###########################################################
usage_install() {
cat <<EOF
    Usage: devsetup install [SCRIPT]

    Script          Description
    homebrew        Install homebrew package manager for macOS
    git             Install and set-up git
    bash            Install the latest version of Bash
EOF
}

# devsetup update usage
###########################################################
usage_update() {
cat <<EOF
    Usage: devsetup update [SCRIPT]

    Script          Description
    devsetup        Update devsetup
EOF
}

# Print formated message
# print COLOR FRAME MSG
###########################################################
print() {
    COLOR=${1}
    FRAME=${2}
    MSG=${3}

    case "${COLOR}" in
        *"red"*) COLOR=${COLOR_RED} ;;
        *"green"*) COLOR=${COLOR_GREEN} ;;
        *"yellow"*) COLOR=${COLOR_YELLOW} ;;
        *"blue"*) COLOR=${COLOR_BLUE} ;;
        *"magenta"*) COLOR=${COLOR_MAGENTA} ;;
        *) COLOR=${COLOR_DEFAULT} ;;
    esac

    case "${FRAME}" in
        true)
            printf "${COLOR}`printf "=%0.s" {0..79}`\n"
            printf "${COLOR}${MSG}"
            printf "${COLOR}`printf "=%0.s" {0..79}`\n"
            ;;
        false)
            printf "${COLOR}${MSG}"
            ;;
    esac

    printf "${COLOR_DEFAULT}"
}

# Check Press RETURN to continue
###########################################################
devsetup_continue() {
    print default false "\nPress RETURN to continue or any other key to abort!\n"
    read -s -n 1 key

    if [[ $key = "" ]]; then
        true
    else
        false
    fi
}

# Print the version number of devsetup script
###########################################################
print_version() {
  print default false "devsetup ${VERSION}\n"
}

# Usage error
###########################################################
usage_fatal() { print red false "${*}"; usage >&2; }
usage_install_fatal() { print red false "${*}"; usage_install >&2; }
usage_update_fatal() { print red false "${*}"; usage_update >&2; }

# Check if Homebrew is installed
###########################################################
is_homebrew_installed() {
    if hash brew 2>/dev/null; then
        true
    else
        false
    fi
}

homebrew_update() {
    print green false "Homebrew is already installed - updating ...\n"
    brew update
}

homebrew_not_installed() {
    print red false "\nHomebrew is not installed! Install it with:\n"
    print yellow false "\ndesetup --install homebrew\n"
}

# devsetup install homebrew
###########################################################
devsetup_install_homebrew() {
    print yellow true "Starting Homebrew installation\n"

    # Installing GCC
    print yellow false "Installing the GNU Compiler Collection (GCC)\n"

    # Install the Command Line Tools package
    xcode-select --install

    # Install the additional SDK headers
    sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /

    # Installing Homebrew
    print yellow false "Installing Homebrew\n"

    if is_homebrew_installed; then
        homebrew_update
        brew upgrade
    else
        /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi

    print green true "Homebrew installation successful\n"
}

# devsetup install git
###########################################################
devsetup_git_config() {
    print yellow true "GIT Setup\n"

    print magenta false "git config --global user.name: "
    read GIT_USER_NAME

    print magenta false "git config --global user.email: "
    read GIT_USER_EMAIL

    # Confirm user input
    print green false "\nUser Name: ${GIT_USER_NAME}\n"
    print green false "E-mail: ${GIT_USER_EMAIL}\n"

    if ! devsetup_continue; then
        print red false "\ngit config aborted!\n"
        return 1
    fi
}

devsetup_install_git() {
    if ! devsetup_git_config; then
        print red false "\ngit installation aborted!\n"
        exit 1
    fi

    print yellow true "Installing Git\n"

    if is_homebrew_installed; then
        homebrew_update
    else
        homebrew_not_installed
        exit 1
    fi

    # Install Git
    brew install git

    # Configure Git
    print yellow false "\nConfigure Git\n"

    # User name and email
    git config --global user.name "${GIT_USER_NAME}"
    git config --global user.email "${GIT_USER_EMAIL}"

    # Set Git terminal colors
    git config --global color.ui true
    git config --global color.status.changed "blue normal"
    git config --global color.status.untracked "red normal"
    git config --global color.status.added "magenta normal"
    git config --global color.status.updated "green normal"
    git config --global color.status.branch "yellow normal bold"
    git config --global color.status.header "white normal bold"

    print green true "Git installation successful\n"
}

# devsetup install bash
###########################################################
devsetup_install_bash() {
    set -e

    print yellow true "Updating bash\n"

    if is_homebrew_installed; then
        homebrew_update
    else
        homebrew_not_installed
        exit 1
    fi

    # Install the latest version of Bash
    brew install bash

    # Add the new shell to the list of allowed shells
    if [[ `cat /etc/shells | grep '/usr/local/bin/bash'` = "" ]]; then
        sudo bash -c 'echo /usr/local/bin/bash >> /etc/shells'
        # Change to the new shell
        chsh -s /usr/local/bin/bash
    else
        bash --version
    fi

    print green true "Bash installation successful\n"
}

# devsetup install
###########################################################
devsetup_install() {
    case ${@} in
        "homebrew")
            devsetup_install_homebrew
            exit 0
            ;;
        "git")
            devsetup_install_git
            exit 0
            ;;
        "bash")
            devsetup_install_bash
            exit 0
            ;;
        ""|*)
            usage_install_fatal "invalid installation command\n"
            exit 1
            ;;
    esac
}

# devsetup update devsetup
###########################################################
devsetup_update_devsetup() {
    print yellow false "This update installs to ${DEVSETUP_PREFIX}/devsetup\n"

    if ! devsetup_continue; then
        print red false "\nUpdate aborted!\n"
        exit 1
    fi

    curl -fsSL "${DEVSETUP_URL}" -o "${DEVSETUP_PREFIX}/devsetup" && \
    chmod +x "${DEVSETUP_PREFIX}/devsetup"

    print green false "\nUpdate successful\n"
}

# devsetup update
###########################################################
devsetup_update() {
    case ${@} in
        "devsetup")
            devsetup_update_devsetup
            exit 0
            ;;
        ""|*)
            usage_update_fatal "\ninvalid update command\n"
            exit 1
            ;;
    esac
}

# Parse options
###########################################################
while [ "${#}" -gt 0 ]; do
    case ${1} in
        --*'='*)
            shift
            set -- "${1%%=*}" "${1#*=}" "$@"
            continue
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        -v|--version)
            print_version
            exit 0
            ;;
        -i|--install)
            shift
            devsetup_install ${1}
            exit 0
            ;;
        -u|--update)
            shift
            devsetup_update ${1}
            exit 0
            ;;
        --|-*|*)
            usage_fatal "\nunknown option: ${1}\n"
            exit 1
            ;;
    esac
    shift
done

#!/bin/bash
###########################################################
# Development Environment Setup
#
# Copyright (c) Marcos Gomes-Borges
###########################################################
VERSION="0.0.2"
DEVSETUP_URL="https://raw.githubusercontent.com/marcosgomesborges/dev-setup/master/macos/devsetup"
DEVSETUP_PREFIX=$(dirname $0)

red="\033[91m"
green="\033[92m"
yellow="\033[93m"
blue="\033[94m"
magenta="\033[95m"
resetcolor="\033[39m"

usage() {
cat <<EOF
    Usage: devsetup [OPTIONS]

    Option          Long option         Meaning
    -h              --help              Show this help text and exit
    -v              --version           Show the version number of devsetup script
    -i              --install           Install a package
    -u              --update            Update a package
EOF
}

usage_install() {
cat <<EOF
    Usage: devsetup install [SCRIPT]

    Script              Description
    homebrew            Install homebrew package manager for macOS
    git                 Install and setup git
    bash                Install the latest version of Bash
    bash-tab-completion Install bash tab completion 2
    pyenv               Install multiple Python versions using 'pyenv'
    all                 Install all the packages
EOF
}

usage_update() {
cat <<EOF
    Usage: devsetup update [SCRIPT]

    Script          Description
    devsetup        Update devsetup
    git             Set-up git with username, email, and terminal colors
    bash-profile    Set-up bash_profile
    inputrc         Improve command line history search
EOF
}

read -r -d '' BASH_PROFILE <<"EOF"
# !/bin/bash
###########################################################
# Bash Profile
#
# Copyright (c) Marcos Gomes-Borges
###########################################################

# LS Colors
# CLICOLOR use ANSI color sequences to distinguish file types
export CLICOLOR=true
export LSCOLORS=gxegbxdxcxahadabafacge
alias ls='ls -GFh'

# COLORS \e[<prefix>;<color>m;<decoration> http://jonasjacek.github.io/colors
TEAL="\[\e[38;5;6m\]\]"
YELLOW="\[\e[38;5;11m\]"
MAGENTA="\[\e[38;5;13m\]"
WHITE="\[\e[38;5;15m\]"
GREEN="\[\e[38;5;40m\]"
NONE="\[\e[0m\]"

# Prevent Mac OS ._ in in tar.gz files
export COPYFILE_DISABLE=true

# Homebrew
export PATH="/usr/local/bin:${PATH}"

# Homebrew completion
if [ -f $(brew --prefix)/etc/bash_completion.d/brew ]; then
    . $(brew --prefix)/etc/bash_completion.d/brew
fi

# Bash completion@2
if [ -f /usr/local/share/bash-completion/bash_completion ]; then
  . /usr/local/share/bash-completion/bash_completion
fi

# Bash-Git-prompt
if [ -f $(brew --prefix)/opt/bash-git-prompt/share/gitprompt.sh ]; then
    __GIT_PROMPT_DIR=$(brew --prefix)/opt/bash-git-prompt/share

    GIT_PS1_SHOWCOLORHINTS=true
    GIT_PS1_SHOWDIRTYSTATE=true
    GIT_PS1_SHOWUNTRACKEDFILES=true
    GIT_PS1_DESCRIBE_STYLE='default'

    source $(brew --prefix)/opt/bash-git-prompt/share/gitprompt.sh
fi

# Python virtual environment
# Allow pip only for active virtual environment
# Use `gpip` or `gpip3` for global environment
export PIP_REQUIRE_VIRTUALENV=true
gpip(){
    PIP_REQUIRE_VIRTUALENV="" pip "${@}"
}
gpip3(){
    PIP_REQUIRE_VIRTUALENV="" pip3 "${@}"
}

# Pyenv Python version management
if command -v pyenv 1>/dev/null 2>&1; then
    eval "$(pyenv init -)"
    pyenv virtualenvwrapper
fi

# PRIMARY PROMPT
PROMPT_COMMAND='__git_ps1\
                "\n${MAGENTA}[\d \t] ${YELLOW}`(python --version 2>&1)`${NONE}\
                \n${GREEN}\u@\h:${TEAL}\w${NONE}"\
                "\n${VIRTUAL_ENV:+(`basename ${VIRTUAL_ENV}`)}\\$ "\
                " (%s)"'
EOF

read -r -d '' INPUTRC <<"EOF"
"\e[A":history-search-backward
"\e[B":history-search-forward

set colored-stats on
set mark-symlinked-directories on
set show-all-if-ambiguous on
set show-all-if-unmodified on
set visible-stats on
set completion-ignore-case on
TAB: menu-complete
EOF

# Print a formated message: print <color> <frame> "message"
print() {
    case ${#} in
        "1") COLOR=resetcolor; FRAME=false; MSG=${1} ;;
        "2") COLOR=${1}; FRAME=false; MSG=${2} ;;
        "3") COLOR=${1}; FRAME=${2}; MSG=${3} ;;
    esac

    if [[ ${FRAME} = "frame" ]]; then
        printf "${!COLOR}`printf "=%0.s" {0..79}`\n"
        printf "${!COLOR}${MSG}"
        printf "${!COLOR}`printf "=%0.s" {0..79}`\n"
    else
        printf "${!COLOR}${MSG}"
    fi

    printf ${resetcolor}
}

wait_for_user() {
    print yellow "\nPress RETURN to continue or any other key to abort!\n"

    read -s -n 1 key

    if [[ ${key} != "" ]]; then
        exit 0
    fi
}

wait_for_sudo() {
    trap "exit 1" SIGINT # Process Interruption Ctrl-C

    # Check if sudo password has been entered
    # If not, request sudo password
    if sudo -vn 2>/dev/null; then
        print blue "\n[sudo] this script is using sudo privileges!\n\n"
    else
        print yellow "\n[sudo] Enter password for ${USER}\n"
        sudo -v
    fi

    # Abort if no sudo privileges
    if ! sudo -vn 2>/dev/null; then
        print red "Aborted: "
        print "this script needs sudo privileges!\n"
        exit 1
    fi
}

print_version() {
  print "devsetup ${VERSION}\n"
}

usage_fatal() {
    print red "devsetup: illegal option ${@}\n"
    usage >&2
}

usage_install_fatal() {
    print red "devsetup install: illegal option ${@}\n"
    usage_install >&2
}

usage_update_fatal() {
    print red "devsetup update: illegal option ${@}\n"
    usage_update >&2
}

# Check if Homebrew is installed and update it
homebrew_update() {
    if hash brew 2>/dev/null; then
        print green "Homebrew is already installed - updating ...\n"
        brew update
    else
        print red "Homebrew is not installed! Install it with: "
        print "desetup --install homebrew\n"
        exit 1
    fi
}

devsetup_install_homebrew() {
    wait_for_sudo

    print magenta "Installing the GNU Compiler Collection (GCC)\n"
    xcode-select --install

    print magenta "Installing Command Line Tools additional headers\n"
    sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /

    if hash brew 2>/dev/null; then
        print green "Homebrew is already installed - updating ...\n"
        brew update
        brew upgrade
    else
        print magenta "Installing Homebrew\n"
        /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi

    print green frame "Homebrew installation successful\n"
}

devsetup_git_config() {
    print magenta frame "GIT configuration\n"

    print yellow "git config --global user.name \"Your name\": "
    read GIT_USER_NAME

    print yellow "git config --global user.email \"your@email.com\": "
    read GIT_USER_EMAIL

    # Confirm user input
    print magenta "\nUser Name: "
    print "${GIT_USER_NAME}\n"
    print magenta "E-mail: "
    print "${GIT_USER_EMAIL}\n"

    wait_for_user

    # Set git user name and email
    git config --global user.name "${GIT_USER_NAME}"
    git config --global user.email "${GIT_USER_EMAIL}"

    # Set git terminal colors
    git config --global color.ui true
    git config --global color.status.changed "blue normal"
    git config --global color.status.untracked "red normal"
    git config --global color.status.added "magenta normal"
    git config --global color.status.updated "green normal"
    git config --global color.status.branch "yellow normal bold"
    git config --global color.status.header "white normal bold"
}

devsetup_install_git() {
    homebrew_update
    brew install git
    devsetup_git_config

    print green frame "Git installation successful\n"
}

devsetup_install_bash() {
    wait_for_sudo
    homebrew_update
    brew install bash

    if [[ `cat /etc/shells | grep '/usr/local/bin/bash'` = "" ]]; then
        print magenta "Adding the new shell to the list of allowed shells\n"
        sudo bash -c 'echo /usr/local/bin/bash >> /etc/shells'

        print magenta "Changing to the new shell\n"
        chsh -s /usr/local/bin/bash
    fi

    print green frame "Bash installation successful\n"
}

devsetup_install_bash_tab_completion() {
    wait_for_sudo
    homebrew_update

    print magenta "Install bash TAB completion 2\n"
    brew install bash-completion@2

    print magenta "Install Informative git-prompt\n"
    brew install bash-git-prompt

    print magenta "Install Docker-machine bash TAB completion\n"
    sudo curl -L https://raw.githubusercontent.com/docker/machine/v0.16.0/contrib/completion/bash/docker-machine.bash -o /usr/local/etc/bash_completion.d/docker-machine

    print magenta "Install Docker-compose bash TAB completion\n"
    sudo curl -L https://raw.githubusercontent.com/docker/compose/1.24.0/contrib/completion/bash/docker-compose -o /usr/local/etc/bash_completion.d/docker-compose

    print green frame "Bash TAB Completion installation successful\n"
}

devsetup_install_pyenv() {
    homebrew_update

    print magenta "Installing pyenv\n"
    brew install pyenv

    print magenta "Installing pyenv-virtualenvwrapper\n"
    brew install pyenv-virtualenvwrapper

    prnt magenta "Installing Python 2.7.15, 3.6.5, 3.7.3\n"
    eval "$(pyenv init -)"
    PYTHON_CONFIGURE_OPTS="--enable-framework" pyenv install 2.7.15
    PYTHON_CONFIGURE_OPTS="--enable-framework" pyenv install 3.6.5
    PYTHON_CONFIGURE_OPTS="--enable-framework" pyenv install 3.7.3

    print magenta "Setting up Python 3.6.5 as default\n"
    pyenv global 3.6.5

    print magenta "Setting up virtualenvwrapper\n"
    pyenv virtualenvwrapper

    print green frame "pyenv installation successful\n"
}

devsetup_install_all() {
    trap "exit 1" SIGINT # Process Interruption Ctrl-C

    print magenta "\nThis script will install:\n"
    print "\thomebrew\n"
    print "\tgit\n"
    print "\tbash\n"
    print "\tbash-tab-completion\n"
    print "\tpyenv\n"
    print "\t~/.inputrc\n"
    print "\t~/.bash-profile\n"

    wait_for_user
    wait_for_sudo
    devsetup_install_homebrew
    devsetup_install_git
    devsetup_install_bash
    devsetup_install_bash_tab_completion
    devsetup_install_pyenv
    devsetup_bash_profile_config
    devsetup_inputrc_config
}

devsetup_update_devsetup() {
    print magenta "\nCurrent directory: "
    print "`pwd`\n"
    print magenta "This update installs 'devsetup' to: "
    print "${DEVSETUP_PREFIX}\n"

    wait_for_user

    curl -fsSL "${DEVSETUP_URL}" -o "${DEVSETUP_PREFIX}/devsetup"
    chmod +x "${DEVSETUP_PREFIX}/devsetup"

    print green "\nUpdate successful\n"
}

devsetup_bash_profile_config() {
    if [[ -f ~/.bash_profile ]]; then
        print red "\nThis script will create/overwrite .bash_profile file!\n"
        print magenta "\nA backup will be available: "
        print "~/.bash_profile.bkp\n"

        wait_for_user

        cp ~/.bash_profile ~/.bash_profile.bkp
    fi

    echo "${BASH_PROFILE}" > ${HOME}/.bash_profile
    print green frame "~/.bash_profile configured successful\n"
}

devsetup_inputrc_config() {
    echo "${INPUTRC}" > ${HOME}/.inputrc
    print green frame "~/.inputrc configured successful\n"
}

# Parse devsetup --install options
devsetup_install() {
    sudo -K # Force sudo <command> ask for a root password

    case ${@} in
        "homebrew")
            devsetup_install_homebrew
            ;;
        "git")
            devsetup_install_git
            ;;
        "bash")
            devsetup_install_bash
            ;;
        "bash-tab-completion")
            devsetup_install_bash_tab_completion
            ;;
        "pyenv")
            devsetup_install_pyenv
            ;;
        "all")
            devsetup_install_all
            ;;
        ""|*)
            usage_install_fatal ${@}
            exit 1
            ;;
    esac
}

# Parse devsetup --update options
devsetup_update() {
    sudo -K # Force sudo <command> ask for a root password

    case ${@} in
        "devsetup")
            devsetup_update_devsetup
            ;;
        "git")
            devsetup_git_config
            ;;
        "bash-profile")
            devsetup_bash_profile_config
            ;;
        "inputrc")
            devsetup_inputrc_config
            ;;
        ""|*)
            usage_update_fatal ${@}
            exit 1
            ;;
    esac
}

# Parse devsetup options
while [ "${#}" -gt 0 ]; do
    case ${1} in
        --*'='*)
            shift
            set -- "${1%%=*}" "${1#*=}" "$@"
            continue
            ;;
        -h|--help)
            print_version
            usage
            exit 0
            ;;
        -v|--version)
            print_version
            exit 0
            ;;
        -i|--install)
            shift
            devsetup_install ${1}
            exit 0
            ;;
        -u|--update)
            shift
            devsetup_update ${1}
            exit 0
            ;;
        --|-*|*)
            usage_fatal ${1}
            exit 1
            ;;
    esac
    shift
done
